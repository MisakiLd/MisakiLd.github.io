{"meta":{"title":"正标题44","subtitle":"副标题","description":"网站描述","author":"MistaLd","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2019-10-18T14:08:16.000Z","updated":"2020-02-08T15:25:03.988Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"这个index改一改没问题吗","date":"2019-10-18T15:17:42.000Z","updated":"2019-10-18T15:21:21.895Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"？？？？"},{"title":"tag","date":"2020-02-08T15:22:47.636Z","updated":"2020-02-08T15:22:47.636Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"python基础记录(1)","slug":"python1","date":"2020-02-22T18:25:05.000Z","updated":"2021-10-12T14:09:41.212Z","comments":true,"path":"2020/02/23/python1/","link":"","permalink":"http://yoursite.com/2020/02/23/python1/","excerpt":"","text":"面向对象概念类的语法[访问修饰符] class 类名{类的描述信息;} 访问修饰符：用于描述此类的访问权限，有默认值；class：关键字，用于声明一个类，和enum，struct作用一样。类的描述信息：描述这类事物的特征（字段，属性，方法）； 对象语法： 类名 对象名 = new 类名();使用实例化对象类名 对象名 = new 类名(); 赋值：对象名.字段名 = 值取值：对象名.字段名 123456789101112131415161718192021public class Man&#123; public string _name; public int _age; public char _gender; public void Hobby() &#123; Console.WriteLine(&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;,XXXX&quot;,_name,_age,_gender); &#125;&#125; Man xiaom = new Man(); xiaom._age = 18; xiaom._gender = &apos;男&apos;; xiaom._name = &quot;小明&quot;; xiaom.Hobby(); Console.ReadKey();","categories":[{"name":"python基础","slug":"python基础","permalink":"http://yoursite.com/categories/python基础/"}],"tags":[{"name":"阿巴阿巴","slug":"阿巴阿巴","permalink":"http://yoursite.com/tags/阿巴阿巴/"}]},{"title":"C#基础记录(7)","slug":"c沙坡7","date":"2020-02-22T18:25:05.000Z","updated":"2020-02-22T17:02:44.175Z","comments":true,"path":"2020/02/23/c沙坡7/","link":"","permalink":"http://yoursite.com/2020/02/23/c沙坡7/","excerpt":"","text":"面向对象概念类的语法[访问修饰符] class 类名{类的描述信息;} 访问修饰符：用于描述此类的访问权限，有默认值；class：关键字，用于声明一个类，和enum，struct作用一样。类的描述信息：描述这类事物的特征（字段，属性，方法）； 对象语法： 类名 对象名 = new 类名();使用实例化对象类名 对象名 = new 类名(); 赋值：对象名.字段名 = 值取值：对象名.字段名 123456789101112131415161718192021public class Man&#123; public string _name; public int _age; public char _gender; public void Hobby() &#123; Console.WriteLine(&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;,XXXX&quot;,_name,_age,_gender); &#125;&#125; Man xiaom = new Man(); xiaom._age = 18; xiaom._gender = &apos;男&apos;; xiaom._name = &quot;小明&quot;; xiaom.Hobby(); Console.ReadKey();","categories":[{"name":"C#基础","slug":"C-基础","permalink":"http://yoursite.com/categories/C-基础/"}],"tags":[{"name":"面向对象","slug":"面向对象","permalink":"http://yoursite.com/tags/面向对象/"}]},{"title":"C#基础记录(6)","slug":"c沙坡6","date":"2020-02-21T14:51:14.000Z","updated":"2020-02-22T14:51:23.516Z","comments":true,"path":"2020/02/21/c沙坡6/","link":"","permalink":"http://yoursite.com/2020/02/21/c沙坡6/","excerpt":"","text":"方法代码复用机制 语法public static 返回值类型 函数名 ([参数列表]){函数代码体;}static:静态标识符：返回值类型：如不需要返回值写voud方法名：覆核帕斯卡命名参数列表：如不需要参数小括号中可以为空，如果需要参数以 参数类型 参数名 的形式写 调用类名.方法名（【参数】）; 方法的参数和返回值形参：形式参数，定义函数时，在参数列表中定义的函数。实参：实际参数，调用函数是，传递给函数的具体参数。实参的类型和数量必须与形参一致。 返回值关键字return作用：①在函数中返回要返回的值；②立即结束函数 123456789101112 int d = Program.Sum(7, 6); Console.WriteLine(d); Console.ReadKey(); &#125; public static int Sum(int a,int b) &#123; int c = a + b; return c; &#125; &#125;&#125; 12345678910 int a = 10; int b = Number(a); Console.WriteLine(b); Console.ReadKey(); public static int Number(int a)&#123; a = a + 10; return a;&#125; 123456789101112131415 int a = Compare(10, 20); Console.WriteLine(a); Console.ReadKey(); public static int Compare(int a,int b)//形参int a,int b&#123; if (a &gt; b) &#123; return a; &#125; else &#123; return b; &#125; 123456789101112131415 int a = Convert.ToInt32(Console.ReadLine()); bool c = run(a); Console.WriteLine(c); Console.ReadKey(); public static bool run(int a) &#123; bool b =(a % 400 == 0)||(a % 4 == 0 &amp;&amp; a % 100 !=0); return b; &#125;``` # out参数 #用于返回多个不同类型的值。 函数外可以不为变量赋值，而函数内必须为其赋值。 int q; int w; int e; string r; Sum(out q, out w, out e, out r); Console.WriteLine(r); Console.ReadKey(); public static void Sum(out int a,out int b,out int c,out string d) { a = 5; b = a + 1; c = a + b; d = &quot;XX&quot;; }123# ref函数 #将一个变量传入一个函数中处理，再将处理后的值带出函数。 int a = 10; zz(ref a); Console.WriteLine(a); Console.ReadKey(); public static void zz(ref int s) { s += 1; //ref传的是参数，参数是参数，返回值是返回值 } # 函数重载 # 1. 重载：函数名称相同，但参数列表不同。 调用该函数时会根据不同参数自动选择合适的函数重载形式。 2. 参数不同的情况 ①如参数个数相同，则参数类型不能相同； ②如参数类型相同，则参数个数不能相同。 注：函数的返回值和重载没有关系。","categories":[{"name":"C#基础","slug":"C-基础","permalink":"http://yoursite.com/categories/C-基础/"}],"tags":[{"name":"方法语法","slug":"方法语法","permalink":"http://yoursite.com/tags/方法语法/"},{"name":"out.ref参数","slug":"out-ref参数","permalink":"http://yoursite.com/tags/out-ref参数/"},{"name":"函数重载","slug":"函数重载","permalink":"http://yoursite.com/tags/函数重载/"}]},{"title":"C#基础记录(5)","slug":"c沙坡5","date":"2020-02-19T06:18:13.000Z","updated":"2020-02-21T11:00:59.764Z","comments":true,"path":"2020/02/19/c沙坡5/","link":"","permalink":"http://yoursite.com/2020/02/19/c沙坡5/","excerpt":"","text":"常量const,全大写const int A = 10 枚举语法定义在namespace下（帕斯卡命名法）public enum 枚举名{X，X，X}使用枚举类型 变量名 = 枚举类型.值 1234567namespace下 &#123;public enum Gender &#123; 男, 女 &#125; Gender gender = Gender.男; 结构体语法定义在namespace下(帕斯卡命名法)声明结构体public struct 结构体名称{ public 数据类型 字段名； public 数据类型 字段名； public 数据类型 字段名； } 1234567891011121314151617//(namespace下)public struct Person&#123; public string _name; public char _gender; public int _age;&#125; Person xl; xl._name = &quot;小李&quot;; xl._gender = &apos;男&apos;; xl._age = 18; Person xz; xz._name = &quot;小赵&quot;; xz._gender = &apos;男&apos;; xz._age = 18; 数组 初始化数据类型[] 数组名 = new 数据类型[数组长度];new : 创建数组实例。注：左右两端的数据类型一致两种方式：int [] age = new int [10];int [] number = {0,1,2,3,4,5}; 赋值数组名[下标] = 值； 取值数组名[下标]12345678910int[] number = new int[5];for (int i = 0; i &lt; number.Length; i++)&#123; number[i] = i;&#125;for (int i = 0; i &lt; number.Length; i++)&#123; Console.WriteLine(number[i]);&#125;Console.ReadKey(); 其他写法int[] b ={1,2,3,4,5}; //减少了一步赋值同时省略了声明数组长度int[] c = new int[3] {1,2,3};声明同时赋值 12345678910111213141516171819int[] number = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;int max = number[0];int min = number[0];int sum = 0;for (int i = 0; i &lt; number.Length; i++)&#123; if(max &lt; number[i]) &#123; max = number[i]; &#125; if (number[i] &lt; min) &#123; min = number[i]; &#125; sum += number[i];&#125;Console.WriteLine(&quot;最大值&#123;0&#125;,最小值&#123;1&#125;,总和&#123;2&#125;,平均值&#123;3&#125;&quot;, max, min, sum, sum / number.Length);Console.ReadKey(); 123456789string[] name = &#123; &quot;小明&quot;, &quot;小李&quot;, &quot;小红&quot;, &quot;小王&quot; &#125;;string str = null;for (int i = 0; i &lt; name.Length-1; i++)&#123; str += name[i] + &quot;|&quot;; &#125;Console.WriteLine(str+name[name.Length-1]);Console.ReadKey(); //正数+1，负数-1,0不变 int[] number = { 0, 1, -2, 3, -4 }; for (int i = 0; i &lt; number.Length; i++) { if (number[i] &gt; 0) { number[i] += 1; } else if (number[i] &lt; 0) { number[i] -= 1; } Console.WriteLine(number[i]); } Console.ReadKey();","categories":[{"name":"C#基础","slug":"C-基础","permalink":"http://yoursite.com/categories/C-基础/"}],"tags":[{"name":"常量","slug":"常量","permalink":"http://yoursite.com/tags/常量/"},{"name":"枚举","slug":"枚举","permalink":"http://yoursite.com/tags/枚举/"},{"name":"结构体","slug":"结构体","permalink":"http://yoursite.com/tags/结构体/"},{"name":"数组","slug":"数组","permalink":"http://yoursite.com/tags/数组/"}]},{"title":"C#基础记录(4)","slug":"c沙坡4","date":"2020-02-18T11:13:29.000Z","updated":"2020-02-19T13:25:15.377Z","comments":true,"path":"2020/02/18/c沙坡4/","link":"","permalink":"http://yoursite.com/2020/02/18/c沙坡4/","excerpt":"","text":"while语句语法while(循环条件){循环体;}循环条件：一般为关系表达式或一个bool类型值。循环体：要重复执行的代码。 1234567int a = 0;while (a &lt; 10)&#123; Console.WriteLine(&quot;XXX&quot;); a++;&#125;Console.ReadKey(); 12345678Console.WriteLine(&quot;AorB&quot;);string answer = Console.ReadLine();while (answer == &quot;A&quot;)&#123; Console.WriteLine(&quot;XXX&quot;); answer = Console.ReadLine();&#125;Console.ReadKey(); 1234567891011121314Console.WriteLine(&quot;输入数量&quot;);string number = Console.ReadLine();int shuliang = Convert.ToInt32(number);int a = 1;int b = 0;while (a &lt;= shuliang)&#123; Console.WriteLine(&quot;输入第&#123;0&#125;个分数&quot;,a); int fenshu = Convert.ToInt32(Console.ReadLine()); b = b + fenshu; //b += fenshu a++;&#125;Console.WriteLine(&quot;总分为&#123;0&#125;,平均分为&#123;1&#125;&quot;, b, b / shuliang);Console.ReadKey(); do-while语法do{循环体；}while（循环条件）; 12345678string answer = &quot;&quot;;do&#123; Console.WriteLine(&quot;XXX&quot;); answer = Console.ReadLine();&#125; while (answer == &quot;A&quot;);Console.WriteLine(&quot;XXXXX&quot;);Console.ReadKey(); for语句语法for(初始表达式;条件表达式;增量表达式){循环体代码} 1234567int sum = 0;for (int i = 1; i &lt;= 100; i++)&#123; sum += i;&#125;Console.WriteLine(sum);Console.ReadKey(); 123456789101112int sumji = 0;int sumou = 0;for (int i = 1; i &lt;= 100; i++) //或者i += 2，&#123; sumji += i++;&#125;for (int i = 1; i &lt;= 100; i++) //或者i=2,i+=2&#123; sumou += ++i;&#125;Console.WriteLine(&quot;基数和是&#123;0&#125;，偶数和是&#123;1&#125;&quot;, sumji, sumou);Console.ReadKey(); for语句嵌套12345678910int sum = 1;for (int i = 1; i &lt;= 10; i++)&#123; for (int j = 1; j &lt;=10; j++) &#123; Console.WriteLine(&quot;XXXXX&#123;0&#125;&quot;,sum); sum++; &#125; &#125;Console.ReadKey(); 九九表 123456789for (int i = 1; i &lt; 10; i++)&#123; for (int j = 1; j &lt;= i; j++) &#123; Console.Write(&quot;&#123;0&#125;x&#123;1&#125;=&#123;2&#125;\\t&quot;, i, j, i * j); &#125; Console.WriteLine(&quot;&quot;);&#125;Console.ReadKey(); break，continue1.break结束循环2.continue结束本次循环 1234567891011121314int sum = 0;int i = 1;while (i &lt;= 100)&#123; if (i % 7 == 0) &#123; i++; continue; &#125; sum += i; i++;&#125;Console.WriteLine(sum);Console.ReadKey();","categories":[{"name":"C#基础","slug":"C-基础","permalink":"http://yoursite.com/categories/C-基础/"}],"tags":[{"name":"while","slug":"while","permalink":"http://yoursite.com/tags/while/"},{"name":"for","slug":"for","permalink":"http://yoursite.com/tags/for/"}]},{"title":"C#基础记录(3)","slug":"c沙坡3","date":"2020-02-17T11:13:29.000Z","updated":"2020-02-17T07:25:24.494Z","comments":true,"path":"2020/02/17/c沙坡3/","link":"","permalink":"http://yoursite.com/2020/02/17/c沙坡3/","excerpt":"","text":"关系运算符＞ ＜ ＞= ＜= == !=由关系运算符连接的表达式为关系表达式关系表达式结果只有对错所以结果用bool类型bool a = 100 ＞ 50console.WritLine（a）; 逻辑运算符 &amp;&amp;逻辑与bool b = 140 ＜ 200&amp;&true;（或140＜200&amp;&amp;7＞1）console.WritLine(b); ||逻辑或同理 ！逻辑非bool c = !(5＞3);console.writeline(c); if-else if语句①语法if(判断条件){代码}判断条件一般为关系表达式或bool类型的值true执行，false跳过 if-else语句语法if(判断条件){代码} else {代码} if-else-if语句 123456789101112131415161718192021222324252627int a = Convert.ToInt32(Console.ReadLine());if (a &gt; 200)&#123; Console.WriteLine(&quot;200 +&quot;);&#125;else&#123; if (a &gt; 150 &amp;&amp; a &lt;= 200) //&amp;&amp;a《200可省略 &#123; Console.WriteLine(&quot;150~200&quot;); &#125; else &#123; if (a &gt; 100 &amp;&amp; a &lt;= 150)//同理 &#123; Console.WriteLine(&quot;100~150&quot;); &#125; else &#123; if (a &lt;= 100)//同理 &#123; Console.WriteLine(&quot;100以下&quot;); &#125; &#125; &#125;&#125;Console.ReadKey(); switch语句12345678910111213string a = Console.ReadLine();switch (a)&#123; case &quot;小明&quot;: Console.WriteLine(&quot;XX&quot;); break; case &quot;小红&quot;:Console.WriteLine(&quot;XXX&quot;); break; case &quot;小李&quot;:Console.WriteLine(&quot;XXXX&quot;); break; default:Console.WriteLine(&quot;XXXXXXXXX&quot;); break;&#125;Console.ReadKey();","categories":[{"name":"C#基础","slug":"C-基础","permalink":"http://yoursite.com/categories/C-基础/"}],"tags":[{"name":"占位符","slug":"占位符","permalink":"http://yoursite.com/tags/占位符/"},{"name":"关系运算符","slug":"关系运算符","permalink":"http://yoursite.com/tags/关系运算符/"},{"name":"逻辑运算符","slug":"逻辑运算符","permalink":"http://yoursite.com/tags/逻辑运算符/"},{"name":"if-else","slug":"if-else","permalink":"http://yoursite.com/tags/if-else/"},{"name":"switch","slug":"switch","permalink":"http://yoursite.com/tags/switch/"}]},{"title":"C#基础记录(2)","slug":"c沙坡2","date":"2020-02-16T11:13:29.000Z","updated":"2020-02-17T07:27:45.474Z","comments":true,"path":"2020/02/16/c沙坡2/","link":"","permalink":"http://yoursite.com/2020/02/16/c沙坡2/","excerpt":"","text":"axure 加加与减减1.++(1)前++和后++单独使用，前++与后++都为自身+1前++，自身+1，后参与运算。int a = 10;int b = 5 + ++a;a为11，b为16后++，原值先参与运算，后自身+1。int a = 10;int b = 5 + a++;a为11，b为15+=int a = 10;int a += 20；a为30，a+20=aint a = 10;int b = a++ + ++a * 3 + –a + a++;10+12*3+11+11 一元运算符++ –只需要一个操作数完成的运算。 二元运算符例+ - * / %+连接字符串或字符串与数字需要两个或以上才能完成的操作符。 运算1.一元运算符优先级高于二元运算符。2.表达式中一、二元运算符共存，首先计算一元运算符。 接受用户输入console.readline();例Console.WriteLine(“请输入分类：”)；string tags = Console.ReadLine();console.writline(“你的分类为{0}”，name)；console.readkey();输入整数转换数字string str = Console.ReadLine();int num = Convert.ToInt32(str):Console.WriteLine(num);输入小数转换数字string str = Console.ReadLine();double num = Convert.ToDouble(str):Console.WriteLine(num); 常用转义符\\n:换行&quot;:英文半角双引号（”12345&quot;6&quot;7”）\\:一个\\t:一个tab空格\\b:一个Backpace（头尾无用）@:在字符串前①取消“\\”在字符串中的转义作用，使其单纯表示斜杠（””除外）（@”C\\a\\b\\c\\d\\e\\f”)②将字符串按原格式输出（@“aabbccddeffgghh“） 类型转换1.隐式类型转换（自动类型转换）①两种类型兼容例int和double兼容②原类型小于目标类型小转大例如int–double,int–float2.显式类型转换（强制类型转换）①两种类型兼容②原类型大于目标类型double-int,double-float例double a = 3.14;int b = (int)a;3.表达式中类型转换两个int类型加减乘除取余后仍为整数类型。如果一个操作数为double类型，则整个表达式可提升为double类型。","categories":[{"name":"C#基础","slug":"C-基础","permalink":"http://yoursite.com/categories/C-基础/"}],"tags":[{"name":"类型转换","slug":"类型转换","permalink":"http://yoursite.com/tags/类型转换/"},{"name":"转义符","slug":"转义符","permalink":"http://yoursite.com/tags/转义符/"},{"name":"一二元运算符","slug":"一二元运算符","permalink":"http://yoursite.com/tags/一二元运算符/"},{"name":"用户输入","slug":"用户输入","permalink":"http://yoursite.com/tags/用户输入/"}]},{"title":"C#基础记录(1)","slug":"c沙坡1","date":"2020-02-15T11:13:29.000Z","updated":"2020-02-17T07:25:25.131Z","comments":true,"path":"2020/02/15/c沙坡1/","link":"","permalink":"http://yoursite.com/2020/02/15/c沙坡1/","excerpt":"","text":"Console.WriteLine(“”); 内容输出至控制台Console.ReadKey(); 暂停当前程序，等待按任意键 注释//&nbsp;&ensp;&ensp;&ensp;&nbsp;&nbsp;&ensp;&ensp;&ensp; 行注释/* */ &ensp;&ensp;&ensp;&ensp;&ensp; 大段文本注释/// &ensp;&nbsp;&ensp;&ensp;&ensp;&ensp;&ensp; 类、方法注释ctrl+k+c &ensp;&nbsp;注释所选代码ctrl+k+u &ensp;&nbsp;取消注释 12#region折叠（起）#endregion折叠（止） 解决方案Properties:属性App.config:配置文件Program:类文件 变量 变量类型 变量名 = 值 123int number = 10;int speed;speed = 10; 先声明，后赋值，再使用 基本数据类型 int范围-2147483648~2147483647 float单精度小数数值后需加f。整数、小数，小数点后7位 double双精度小数小数点后15~16位 string字符串类型存储文本、空。值需加双引号 char字符类型存储单个字符，最多最少只能一个字符，不能存储空值需加单引号 bool描述对错值只有true和false运算符（1）+&nbsp;-&nbsp;*&nbsp;/10/3 = 3 取整10%3 = 1 取余（2）“=”和“+”占位符{}1234int A =10 float B =20 double C = 30 Console.WriteLine(&quot;XXX&#123;0&#125;,DAV&#123;1&#125;,IFN&#123;2&#125;&quot;，A,B,C);","categories":[{"name":"C#基础","slug":"C-基础","permalink":"http://yoursite.com/categories/C-基础/"}],"tags":[{"name":"数据类型","slug":"数据类型","permalink":"http://yoursite.com/tags/数据类型/"},{"name":"运算符","slug":"运算符","permalink":"http://yoursite.com/tags/运算符/"},{"name":"占位符","slug":"占位符","permalink":"http://yoursite.com/tags/占位符/"}]},{"title":"第二","slug":"第二","date":"2019-10-18T13:24:44.000Z","updated":"2019-10-18T13:49:41.077Z","comments":true,"path":"2019/10/18/第二/","link":"","permalink":"http://yoursite.com/2019/10/18/第二/","excerpt":"","text":"啊啊啊啊啊啊","categories":[{"name":"分类一","slug":"分类一","permalink":"http://yoursite.com/categories/分类一/"}],"tags":[{"name":"标签一","slug":"标签一","permalink":"http://yoursite.com/tags/标签一/"},{"name":"ballball啦","slug":"ballball啦","permalink":"http://yoursite.com/tags/ballball啦/"}]},{"title":"测试","slug":"测试分类","date":"2019-10-16T11:13:29.000Z","updated":"2020-02-05T16:30:35.312Z","comments":true,"path":"2019/10/16/测试分类/","link":"","permalink":"http://yoursite.com/2019/10/16/测试分类/","excerpt":"","text":"1.标题#2.引用 前加&gt; —–鲁迅 3.列表 第一 第二 第三 4.斜体前后各一个* 斜体 5.加粗前后各两个** 加粗 6.代码前后三个` 12list_1 = set(list_1)list_2 = set([2, 6, 0, 66, 22, 8, 4]) 7.网页方括号加圆括号 方括号填名称，圆括号填网址 百度官网 8.分割线三个星 #9.换行#末尾双空格12345678#10.空格#&amp;nbsp; &nbsp;不断行一个空格&amp;ensp;&ensp;两个空格&amp;emsp;&ensp;四个空格","categories":[{"name":"分类一","slug":"分类一","permalink":"http://yoursite.com/categories/分类一/"},{"name":"分类一下二","slug":"分类一/分类一下二","permalink":"http://yoursite.com/categories/分类一/分类一下二/"}],"tags":[{"name":"标签一","slug":"标签一","permalink":"http://yoursite.com/tags/标签一/"},{"name":"标签二","slug":"标签二","permalink":"http://yoursite.com/tags/标签二/"},{"name":"标签三","slug":"标签三","permalink":"http://yoursite.com/tags/标签三/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-10-12T16:29:58.233Z","updated":"2019-10-12T16:29:58.233Z","comments":true,"path":"2019/10/13/hello-world/","link":"","permalink":"http://yoursite.com/2019/10/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}